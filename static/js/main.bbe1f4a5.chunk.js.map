{"version":3,"sources":["TodoListHeader/TodoListTitle/TodoListTitle.jsx","TodoListHeader/AddNewItemForm/AddNewItemForm.jsx","TodoListHeader/TodoListHeader.jsx","TodoListFooter.jsx","TodoListTask.jsx","TodoListTasks.js","api.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTitle","render","react_default","a","createElement","className","_this","props","title","React","Component","AddNewItemForm","state","error","valueInput","onChangeInput","event","console","dir","setState","currentTarget","value","onAddTaskClick","undefined","addItem","onKeyPress","e","key","classError","type","onChange","placeholder","onClick","TodoListHeader","TodoListHeader_TodoListTitle_TodoListTitle","TodoListHeader_AddNewItemForm_AddNewItemForm","addTask","TodoListFooter","isShow","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTask","editMode","onIsDoneChange","changeStatus","task","id","checked","activateEditMode","diactivateEditMode","onTitleChange","changeTitle","priority","done","isDone","concat","autoFocus","onBlur","TodoListTasks","tasksElements","tasks","map","item","src_TodoListTask","instance","axios","create","baseURL","withCredentials","headers","API-KEY","TodoList","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","get","then","res","data","items","newText","post","newTacks","Object","toConsumableArray","_restoreState","getItem","parse","_addTask","newTask","newFilterValue","changeTask","taskId","object","newTasks","objectSpread","newTitle","src_TodoListHeader_TodoListHeader","src_TodoListTasks","filter","src_TodoListFooter","_this2","this","z","reduce","i","log","App","nextItemId","todoLists","onAddNewGeneralTaskClick","todolist","_onAddNewGeneralTaskClick","newTodoList","mapTodoList","src_TodoList","Fragment","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbe1f4a5.chunk.js","sourcesContent":["import React from \"react\";\nimport '../../App.css';\n\nclass TodoListTitle extends React.Component {\n    render = () => {\n        return (\n            <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n        );\n    }\n}\n\nexport default TodoListTitle;","import React from \"react\";\nimport '../../App.css';\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        valueInput: '',\n    };\n\n    onChangeInput = (event) => {\n        console.dir(this.state.valueInput);\n        this.setState({error: false, valueInput: event.currentTarget.value})\n    };\n\n    onAddTaskClick = () => {\n        let valueInput = this.state.valueInput;\n        this.state.valueInput = '';\n        if (valueInput === '' || valueInput === null || valueInput === undefined) {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            this.props.addItem(valueInput)\n        }\n    };\n\n    onKeyPress = e => {\n        if (e.key === \"Enter\") {\n            this.onAddTaskClick();\n        }\n    };\n\n\n    render = () => {\n        let classError = this.state.error === true ? `error` : '';\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input onKeyPress={this.onKeyPress} type=\"text\" onChange={this.onChangeInput} className={classError}\n                       placeholder=\"New task name\" value={this.state.valueInput}/>\n                <button onClick={() => this.onAddTaskClick()}>Add</button>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;","import React from \"react\";\nimport '../App.css';\nimport TodoListTitle from \"./TodoListTitle/TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm/AddNewItemForm\";\n\nclass TodoListHeader extends React.Component {\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n\n                <TodoListTitle title={this.props.title}/>\n                <AddNewItemForm addItem={this.props.addTask}/>\n\n            </div>\n\n        );\n    }\n}\nexport default TodoListHeader;","import React from \"react\";\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isShow: true,\n    };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\") };\n\n    onShowFiltersClick = () => {  this.setState({isShow: true}); };\n    onHideFiltersClick = () => {  this.setState({isShow: false});};\n\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {this.state.isShow &&\n                <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n                }\n                {this.state.isShow && <span onClick={this.onHideFiltersClick}>Hide</span>}\n                {!this.state.isShow && <span onClick={this.onShowFiltersClick}>Show</span>}\n            </div>\n        );\n    }\n}\nexport default TodoListFooter;","import React from \"react\";\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editMode: true,\n    };\n    onIsDoneChange = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked);\n    };\n\n\n    activateEditMode = () => {\n        this.setState({editMode: !this.state.editMode});\n    };\n    diactivateEditMode = () => {\n        this.setState({editMode: !this.state.editMode});\n    };\n\n    onTitleChange = (e) => {\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\n    };\n\n    render = (props) => {\n        let priority = '';\n        switch (this.props.task.priority) {\n            case 0: priority = 'Low';\n                break;\n            case 1: priority = 'Middle';\n                break;\n            case 2: priority = 'Hi';\n                break;\n            case 3: priority = 'Urgently';\n                break;\n            case 4: priority = 'Later';\n                break;\n            default: priority = '';\n        }\n\n        let done = this.props.task.isDone ? \"todoList-task-done\" : \"todoList-task\";\n        return (\n            <div className={done}>\n                <input type=\"checkbox\" checked={this.props.task.isDone} onChange={this.onIsDoneChange}/>\n                {this.state.editMode\n                    ? <span onClick={this.activateEditMode}>{`${this.props.task.title}`}ç</span>\n                    : <input autoFocus={true} onBlur={this.diactivateEditMode} onChange={this.onTitleChange} value={this.props.task.title}/>\n                }, priority - {priority}\n            </div>\n        );\n    }\n}\nexport default TodoListTask;","import React from \"react\";\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n        const tasksElements = this.props.tasks.map(item => (\n            <TodoListTask changeStatus={this.props.changeStatus} changeTitle={this.props.changeTitle} task={item}/>)\n        );\n        return (\n            <div className='todoList-task'>\n                {tasksElements}\n            </div>\n        )\n    }\n}\n\nexport default TodoListTasks;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\n    withCredentials: true,\n    headers: {\"API-KEY\": \"326adc8b-48be-4905-a33d-14875af1c491\"}\n});\n\nexport default instance;","import React from 'react';\nimport './App.css';\nimport TodoListHeader from './TodoListHeader/TodoListHeader'\nimport TodoListFooter from './TodoListFooter'\nimport TodoListTasks from './TodoListTasks'\nimport axios from \"axios\";\nimport instance from \"./api\";\n\nclass TodoList extends React.Component {\n\n    //Восстановление state-а мы будем делать в специальном методе жизненного цикла (главный метод,\n    // запоминайте его на всю жизнь) - методе ​componentDidMount (​он срабатывает один раз, в момент,\n    // когда компонента отрисовалась)\n    componentDidMount() {\n\n        this.restoreState();\n\n        this.setState({}, () => {\n            //Лучше это использовать, чем нижний\n            // this.state.tasks.forEach(item=>{\n            //     if (item.id >= this.nextTaskId){\n            //         this.nextTaskId = item.id +1;\n            //     }\n            // });\n\n            //Метод(callback) передает i проверку\n            let z = this.state.tasks.reduce((i, item) => {\n                if (i < item.id) {\n                    return item.id;\n                } else return i;\n            }, -1);\n\n            console.log(z);\n            if (z !== 0 || z !== null) {\n                return this.nextTaskId = z + 1;\n                // this.state.tasks[z-1].id + 1;\n            } else return this.nextTaskId = 0;\n\n\n        });\n    }\n\n    nextTaskId = 0;\n    state = {\n        tasks: [\n            // {id: 0, title: 'JS', isDone: true, priority: \"medium\"},\n            // {id: 1, title: 'HTML', isDone: true, priority: \"low\"},\n            // {id: 2, title: 'CSS', isDone: true, priority: \"low\"},\n            // {id: 3, title: 'React', isDone: false, priority: \"high\"},\n        ],\n        filterValue: \"All\"\n    };\n\n    //Давайте добавим в App метод, который будет брать текущий стейт и... сохранять его в localStorage,\n    // и метод, который будет брать данные из localStorage и устанавливать его как state:\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-state\" + this.props.id, stateAsString);\n    };\n\n    restoreState = () => {\n        let state = this.state;\n        axios.get(\n            `https://social-network.samuraijs.com/api/1.0/todo-lists/${this.props.id}/tasks`,\n            {withCredentials: true}\n        )\n            .then(res => {\n                this.setState({tasks: res.data.items});\n            });\n    };\n\n    addTask = (newText) => {\n        instance.post(`todo-lists/${this.props.id}/tasks`, {title: newText})\n            .then(res => {\n                let newTacks = res.data.data.item;\n                this.setState({tasks: [...this.state.tasks, newTacks]});\n            });\n    };\n\n    _restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: \"All\"\n        };\n        let stateAsString = localStorage.getItem(\"our-state\" + this.props.id);\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n    //Видим только одну таску??? Всегда будем видеть на 1 таску меньше. Это потому, что метод t​his.setState -​асинхронный!!!\n    // Это значит, что когда мы запускаем этот метод, он не меняет стейт мгновенно, а делает это ПОТОМ...\n    // Соответственно в момент, когда мы делаем t​his.saveState(), т​о стейт там ещё старый (предыдущий скажем так)..\n    // и новый стейт не устанавливается.\n    // Для этой и других целей, если нам нужно что-то сделать в момент, когда state ​ТОЧНО будет ​обновлен,\n    // у метода setState есть второй параметр - колбэк, который сработает\n    // тогда, когда стейт ТОЧНО обновится. И вот в нём мы можем вызвать наш ​saveState:\n\n    _addTask = (newText) => {\n        let newTask = {\n            id: this.nextTaskId,\n            title: newText,\n            isDone: false,\n            priority: \"low\"\n        };\n        this.nextTaskId++;\n        let newTacks = [...this.state.tasks, newTask];\n        this.setState({tasks: newTacks}, () => this.saveState());\n        // console.log(this.state.tasks.length-1);\n    };\n\n\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue}, () => this.saveState())\n    };\n\n\n    //Общий для всех изменений\n    changeTask = (taskId, object) => {\n        let newTasks = this.state.tasks.map(item => {\n            if (item.id !== taskId) {\n                return item;\n            } else {\n                return {...item, ...object};\n            }\n        });\n        this.setState({tasks: newTasks}, () => this.saveState());\n    };\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone});\n    };\n    changeTitle = (taskId, newTitle) => {\n        this.changeTask(taskId, {title: newTitle});\n    };\n\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n\n                    <TodoListHeader addTask={this.addTask} title={this.props.title}/>\n                    <TodoListTasks changeStatus={this.changeStatus} changeTitle={this.changeTitle}\n                                   tasks={this.state.tasks.filter(item => {\n                                       if (this.state.filterValue === \"All\") {\n                                           return true;\n                                       }\n                                       if (this.state.filterValue === \"Active\") {\n                                           return item.isDone === true;\n                                       }\n                                       if (this.state.filterValue === \"Completed\") {\n                                           return item.isDone === false;\n                                       }\n                                   })}/>\n                    <TodoListFooter filterValue={this.state.filterValue}\n                                    changeFilter={this.changeFilter}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm/AddNewItemForm\";\nimport axios from \"axios\";\nimport instance from \"./api\";\n\nclass App extends React.Component {\n\n    nextItemId = 0;\n    state = {\n        todoLists: [\n            // {id: 1, title: 'One'},\n            // {id: 2, title: 'Two'},\n            // {id: 3, title: 'awefaef'},\n            // {id: 4, title: 'Twasgasgao'},\n        ],\n        title: '',\n    };\n\n    componentDidMount() {\n        this.restoreState();\n        this.setState({}, () => {\n            //Метод(callback) передает i проверку\n            let z = this.state.todoLists.reduce((i, item) => {\n                if (i < item.id) {\n                    return item.id;\n                } else return i;\n            }, -1);\n\n            console.log(z);\n            if (z !== 0 || z !== null) {\n                return this.nextItemId = z + 1;\n                // this.state.tasks[z-1].id + 1;\n            } else return this.nextItemId = 0;\n        });\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-stateGeneral\", stateAsString);\n    };\n\n    restoreState = () => {\n        let state = this.state;\n        axios.get(\n            \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\n            {withCredentials: true})\n            .then(res => {\n                // debugger\n                // console.log(res.data)\n                this.setState({todoLists: res.data});\n            });\n    };\n\n    onAddNewGeneralTaskClick = (title) => {\n        instance.post(\"todo-lists\", {title: title})\n            .then(res => {\n                let todolist = res.data.data.item;\n                this.setState({todoLists: [...this.state.todoLists, todolist]});\n            });\n    };\n\n    _restoreState = () => {\n        let state = {\n            todoLists: [],\n            title: '',\n        };\n        let stateAsString = localStorage.getItem(\"our-stateGeneral\");\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n\n    _onAddNewGeneralTaskClick = (title) => {\n        let newTodoList = {id: this.nextItemId, title: title};\n        this.setState({todoLists: [...this.state.todoLists, newTodoList]}, () => this.saveState());\n        this.nextItemId++;\n    };\n\n    render = () => {\n        let mapTodoList = this.state.todoLists.map(item => <TodoList id={item.id} title={item.title}/>);\n\n        return (\n            <>\n                <div className={`todoList`}>\n                    <AddNewItemForm addItem={this.onAddNewGeneralTaskClick}/>\n                </div>\n                <div className={`flex`}>\n                    {mapTodoList}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}